{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"注册表","path":"registry","rule":"js:\nconst txt_name = \"githubhikerckl\";\nconst password = \"hiker721\";\n\nfunction getRegistry() {\n    try {\n        let registry = post(\"https://a6.qikekeji.com/txt/data/detail/\", {\n            body: {\n                txt_name: txt_name,\n                password: password\n            }\n        });\n        let rd = JSON.parse(registry).data;\n        registry = JSON.parse(rd.txt_content)[0].content || \"\";\n        return {\n            content: JSON.parse(registry),\n            vid: rd.v_id\n        };\n    } catch {\n        return {\n            content: []\n        };\n    }\n}\n\nfunction setRegistry(registry) {\n    try {\n        let res = post(\"https://a6.qikekeji.com/txt/data/save/\", {\n            body: {\n                txt_name: txt_name,\n                password: password,\n                txt_content: JSON.stringify([{\n                    \"title\": \"注册表\",\n                    \"content\": JSON.stringify(registry.content)\n                }]),\n                v_id: registry.vid || \"\"\n            }\n        });\n        res = JSON.parse(res);\n        if (res.status === 1) {\n            clearMyVar(\"developer\");\n            return true;\n        }\n        return false;\n    } catch (e) {\n        log(e.toString());\n        return false\n    }\n}\n\n\nfunction getDeveloper(renovate) {\n    let developer = storage0.getMyVar(\"developer\", \"\");\n    if (!developer || renovate) {\n        developer = getRegistry().content;\n        storage0.putMyVar(\"developer\", developer);\n    }\n    return developer;\n}\n\nfunction setDevInfo(uesrName, info) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    registry.content.splice(index, 1, info);\n    return setRegistry(registry);\n}\n\nfunction addDev(uesr) {\n    let registry = getRegistry();\n    registry.content.push(uesr);\n    return setRegistry(registry);\n}\n\nfunction deleteDev(uesrName) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    registry.content.splice(index, 1);\n    return setRegistry(registry);\n}\n\nfunction moveDev(uesrName, newIndex) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    let info = registry.content.splice(index, 1)[0];\n    registry.content.splice(newIndex, 0, info);\n    return setRegistry(registry);\n}"},{"col_type":"movie_3","name":"GithubAPI","path":"GithubAPI","rule":"js:\nconst HOST=\"api.github.com\";\nconst basicUrl = \"https://\" + HOST;\n\nfunction getContents(repo, path) {\n    let res = fetch(basicUrl + \"/repos/\" + repo + \"/contents/\" + (path || \"\"));\n    res = JSON.parse(res);\n    if (res.message) {\n        throw new Error(res.message);\n    }\n    return res;\n}\n\nfunction getRepoInfo(repo, token) {\n    let login = JSON.parse(fetch(basicUrl + \"/repos/\" + repo, {\n        headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            Authorization: \"token \" + token\n        }\n    }));\n    if (login.message) {\n        throw new Error(login.message);\n    }\n    return login;\n}\n\nfunction createFile(repo, token, path, content) {\n    let upUrl = basicUrl + \"/repos/\" + repo + \"/contents/\" + path;\n    let sha = \"\";\n    try {\n        sha = getContents(repo, path).sha;\n    } catch (e) {\n        if (e.message != \"Not Found\") {\n            throw e;\n        }\n    }\n    const res = JSON.parse(fetch(upUrl, {\n        body: {\n            branch: 'main',\n            message: 'upload',\n            content: base64Encode(content||\"\"),\n            path: path,\n            sha: sha\n        },\n        headers: {\n            \"Authorization\": \"token \" + token,\n            'Content-Type': 'application/json; charset=utf-8',\n        },\n        method: \"PUT\"\n    }));\n    if (res.message) {\n        throw new Error(res.message);\n    }\n    return res;\n}\n\nfunction deleteFile(repo, token, path,sha) {\n    let deleteUrl = basicUrl + \"/repos/\" + repo + \"/contents/\" + path;\n    if(!sha) {\n        sha = getContents(deleteUrl).sha;\n    }\n    let res = JSON.parse(fetch(deleteUrl, {\n        headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            Authorization: \"token \" + token\n        },\n        body: {\n            sha: sha,\n            message: \"删除规则\"\n        },\n        method: \"DELETE\",\n        withStatusCode: true\n    }));\n    if (res.statusCode === 200) {\n        java.lang.Thread.sleep(1650);\n        return true;\n    } else {\n        res = JSON.parse(res.body);\n        throw new Error(res.message);\n    }\n\n}\n$.exports = {\n    getContents: getContents,\n    getRepoInfo: getRepoInfo,\n    createFile: createFile,\n    deleteFile: deleteFile,\n}"},{"col_type":"movie_3","name":"提交规则","path":"submit","rule":"/*\nconst repo = MY_ACCOUNT; // 填你的仓库 repo\nconst token = MY_PASSWORD; // 填你的 Token\n\nlet path;\nlet content;\nlet indexObj = [];\nlet pass;\nlet sha;\nlet noCopy = false;\nif (MY_EXTRA.includes(\"#noCopy#\")) {\n    MY_EXTRA = MY_EXTRA.replace(/#noCopy#/g, \"\");\n    noCopy = true;\n}\nif (Array.isArray(MY_RULE)) {\n    path = MY_RULE[0].group + \".json\";\n    pass = \"海阔视界首页合集规则【\" + MY_RULE[0].group + \"】￥home_rule_url￥\";\n} else {\n    path = MY_RULE.title + \".hiker\";\n    pass = \"海阔视界首页频道规则【\" + MY_RULE.title + \"】￥home_rule_url￥\";\n}\ncontent = JSON.stringify(MY_RULE);\nlet indexFile = 'index.json';\nlet newIndex = {\n    title: MY_RULE.title,\n    icon: MY_RULE.icon,\n    version: MY_RULE.version,\n    author: MY_RULE.author,\n    type: MY_RULE.type,\n    group: MY_RULE.group,\n    url: MY_RULE.url\n};\nconst upUrl = 'https://api.github.com/repos/' + repo + '/contents/' + path;\nconst indexUrl = 'https://api.github.com/repos/' + repo + '/contents/' + indexFile;\n\nfunction getSha(url) {\n    let sha2 = '';\n    let content = '';\n    try {\n        let query = JSON.parse(fetch(url, {\n            headers: {\n                'Accept': 'application/vnd.github.v3+json'\n            }\n        }));\n        if (query.message !== \"Not Found\") {\n            sha2 = query.sha;\n            content = base64Decode(query.content);\n        }\n\n    } catch (e) {\n\n    }\n\n    return {\n        sha: sha2,\n        content: content\n    }\n}\n\n\nlet indexData = getSha(indexUrl);\nsha = getSha(upUrl).sha;\nif (indexData.sha) {\n    log('存在摘要文件');\n    indexObj = JSON.parse(indexData.content || '[]');\n}\nlet index = indexObj.findIndex(it => it.title == MY_RULE.title);\n\nif (index > -1) {\n    indexObj[index] = Object.assign(indexObj[index], newIndex)\n} else {\n    indexObj.push(newIndex)\n}\nlog(indexObj);\ntry {\n    const res = JSON.parse(fetch(upUrl, {\n        body: {\n            branch: 'main',\n            message: 'upload',\n            content: base64Encode(content),\n            path: path,\n            sha: sha\n        },\n        headers: {\n            \"Authorization\": `token ${token}`,\n            'Content-Type': 'application/json; charset=utf-8',\n        },\n        method: \"PUT\"\n    }));\n    const res2 = JSON.parse(fetch(indexUrl, {\n        body: {\n            branch: 'main',\n            message: 'upload',\n            content: base64Encode(JSON.stringify(indexObj)),\n            path: indexFile,\n            sha: indexData.sha\n        },\n        headers: {\n            \"Authorization\": `token ${token}`,\n            'Content-Type': 'application/json; charset=utf-8',\n        },\n        method: \"PUT\"\n    }));\n    log(res2.content.download_url);\n    // 直接取得返回的图片地址\n    if (res.content.download_url) {\n        if (noCopy) {\n            return \"提交成功\";\n        }\n        if (MY_EXTRA) {\n            copy(pass + MY_EXTRA.replace(/\\$\\{repo\\}/g, repo).replace(/\\$\\{path\\}/g, path));\n        } else {\n            copy(pass + res.content.download_url);\n        }\n    } else {\n        return new Error(res.message);\n    }\n    return \"提交成功\";\n} catch (e) {\n    return \"提交失败:\" + e.toString();\n}*/\nconst GithubAPI = $.require(\"GithubAPI?rule=Github仓库\");\n$.exports = function(repo, token, MY_RULE, config) {\n    let pass, path;\n    if (Array.isArray(MY_RULE)) {\n        path = \"rules/\" + MY_RULE[0].group + \".json\";\n        pass = \"海阔视界首页合集规则【\" + MY_RULE[0].group + \"】￥home_rule_url￥\";\n    } else {\n        path = \"compilations/\" + MY_RULE.title + \".json\";\n        pass = \"海阔视界首页频道规则【\" + MY_RULE.title + \"】￥home9_rule_url￥\";\n    }\n    try {\n        let res = GithubAPI.createFile(repo, token, path, JSON.stringify(MY_RULE));\n        return \"上传成功\";\n    } catch (e) {\n        log(e.toString())\n        return \"上传失败\"\n    }\n}"}],"title":"Github仓库","author":"@LoyDgIk","version":0,"type":"video","url":"hiker://empty##","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:","searchFind":"","search_url":"","group":"开发中心","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"注册表\",\"path\":\"registry\",\"rule\":\"js:\\nconst txt_name = \\\"githubhikerckl\\\";\\nconst password = \\\"hiker721\\\";\\n\\nfunction getRegistry() {\\n    try {\\n        let registry = post(\\\"https://a6.qikekeji.com/txt/data/detail/\\\", {\\n            body: {\\n                txt_name: txt_name,\\n                password: password\\n            }\\n        });\\n        let rd = JSON.parse(registry).data;\\n        registry = JSON.parse(rd.txt_content)[0].content || \\\"\\\";\\n        return {\\n            content: JSON.parse(registry),\\n            vid: rd.v_id\\n        };\\n    } catch {\\n        return {\\n            content: []\\n        };\\n    }\\n}\\n\\nfunction setRegistry(registry) {\\n    try {\\n        let res = post(\\\"https://a6.qikekeji.com/txt/data/save/\\\", {\\n            body: {\\n                txt_name: txt_name,\\n                password: password,\\n                txt_content: JSON.stringify([{\\n                    \\\"title\\\": \\\"注册表\\\",\\n                    \\\"content\\\": JSON.stringify(registry.content)\\n                }]),\\n                v_id: registry.vid || \\\"\\\"\\n            }\\n        });\\n        res = JSON.parse(res);\\n        if (res.status === 1) {\\n            clearMyVar(\\\"developer\\\");\\n            return true;\\n        }\\n        return false;\\n    } catch (e) {\\n        log(e.toString());\\n        return false\\n    }\\n}\\n\\n\\nfunction getDeveloper(renovate) {\\n    let developer = storage0.getMyVar(\\\"developer\\\", \\\"\\\");\\n    if (!developer || renovate) {\\n        developer = getRegistry().content;\\n        storage0.putMyVar(\\\"developer\\\", developer);\\n    }\\n    return developer;\\n}\\n\\nfunction setDevInfo(uesrName, info) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    registry.content.splice(index, 1, info);\\n    return setRegistry(registry);\\n}\\n\\nfunction addDev(uesr) {\\n    let registry = getRegistry();\\n    registry.content.push(uesr);\\n    return setRegistry(registry);\\n}\\n\\nfunction deleteDev(uesrName) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    registry.content.splice(index, 1);\\n    return setRegistry(registry);\\n}\\n\\nfunction moveDev(uesrName, newIndex) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    let info = registry.content.splice(index, 1)[0];\\n    registry.content.splice(newIndex, 0, info);\\n    return setRegistry(registry);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"GithubAPI\",\"path\":\"GithubAPI\",\"rule\":\"js:\\nconst HOST=\\\"api.github.com\\\";\\nconst basicUrl = \\\"https://\\\" + HOST;\\n\\nfunction getContents(repo, path) {\\n    let res = fetch(basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + (path || \\\"\\\"));\\n    res = JSON.parse(res);\\n    if (res.message) {\\n        throw new Error(res.message);\\n    }\\n    return res;\\n}\\n\\nfunction getRepoInfo(repo, token) {\\n    let login = JSON.parse(fetch(basicUrl + \\\"/repos/\\\" + repo, {\\n        headers: {\\n            Accept: \\\"application/vnd.github.v3+json\\\",\\n            Authorization: \\\"token \\\" + token\\n        }\\n    }));\\n    if (login.message) {\\n        throw new Error(login.message);\\n    }\\n    return login;\\n}\\n\\nfunction createFile(repo, token, path, content) {\\n    let upUrl = basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + path;\\n    let sha = \\\"\\\";\\n    try {\\n        sha = getContents(repo, path).sha;\\n    } catch (e) {\\n        if (e.message != \\\"Not Found\\\") {\\n            throw e;\\n        }\\n    }\\n    const res = JSON.parse(fetch(upUrl, {\\n        body: {\\n            branch: 'main',\\n            message: 'upload',\\n            content: base64Encode(content||\\\"\\\"),\\n            path: path,\\n            sha: sha\\n        },\\n        headers: {\\n            \\\"Authorization\\\": \\\"token \\\" + token,\\n            'Content-Type': 'application/json; charset=utf-8',\\n        },\\n        method: \\\"PUT\\\"\\n    }));\\n    if (res.message) {\\n        throw new Error(res.message);\\n    }\\n    return res;\\n}\\n\\nfunction deleteFile(repo, token, path,sha) {\\n    let deleteUrl = basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + path;\\n    if(!sha) {\\n        sha = getContents(deleteUrl).sha;\\n    }\\n    let res = JSON.parse(fetch(deleteUrl, {\\n        headers: {\\n            Accept: \\\"application/vnd.github.v3+json\\\",\\n            Authorization: \\\"token \\\" + token\\n        },\\n        body: {\\n            sha: sha,\\n            message: \\\"删除规则\\\"\\n        },\\n        method: \\\"DELETE\\\",\\n        withStatusCode: true\\n    }));\\n    if (res.statusCode === 200) {\\n        java.lang.Thread.sleep(1650);\\n        return true;\\n    } else {\\n        res = JSON.parse(res.body);\\n        throw new Error(res.message);\\n    }\\n\\n}\\n$.exports = {\\n    getContents: getContents,\\n    getRepoInfo: getRepoInfo,\\n    createFile: createFile,\\n    deleteFile: deleteFile,\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"提交规则\",\"path\":\"submit\",\"rule\":\"/*\\nconst repo = MY_ACCOUNT; // 填你的仓库 repo\\nconst token = MY_PASSWORD; // 填你的 Token\\n\\nlet path;\\nlet content;\\nlet indexObj = [];\\nlet pass;\\nlet sha;\\nlet noCopy = false;\\nif (MY_EXTRA.includes(\\\"#noCopy#\\\")) {\\n    MY_EXTRA = MY_EXTRA.replace(/#noCopy#/g, \\\"\\\");\\n    noCopy = true;\\n}\\nif (Array.isArray(MY_RULE)) {\\n    path = MY_RULE[0].group + \\\".json\\\";\\n    pass = \\\"海阔视界首页合集规则【\\\" + MY_RULE[0].group + \\\"】￥home_rule_url￥\\\";\\n} else {\\n    path = MY_RULE.title + \\\".hiker\\\";\\n    pass = \\\"海阔视界首页频道规则【\\\" + MY_RULE.title + \\\"】￥home_rule_url￥\\\";\\n}\\ncontent = JSON.stringify(MY_RULE);\\nlet indexFile = 'index.json';\\nlet newIndex = {\\n    title: MY_RULE.title,\\n    icon: MY_RULE.icon,\\n    version: MY_RULE.version,\\n    author: MY_RULE.author,\\n    type: MY_RULE.type,\\n    group: MY_RULE.group,\\n    url: MY_RULE.url\\n};\\nconst upUrl = 'https://api.github.com/repos/' + repo + '/contents/' + path;\\nconst indexUrl = 'https://api.github.com/repos/' + repo + '/contents/' + indexFile;\\n\\nfunction getSha(url) {\\n    let sha2 = '';\\n    let content = '';\\n    try {\\n        let query = JSON.parse(fetch(url, {\\n            headers: {\\n                'Accept': 'application/vnd.github.v3+json'\\n            }\\n        }));\\n        if (query.message !== \\\"Not Found\\\") {\\n            sha2 = query.sha;\\n            content = base64Decode(query.content);\\n        }\\n\\n    } catch (e) {\\n\\n    }\\n\\n    return {\\n        sha: sha2,\\n        content: content\\n    }\\n}\\n\\n\\nlet indexData = getSha(indexUrl);\\nsha = getSha(upUrl).sha;\\nif (indexData.sha) {\\n    log('存在摘要文件');\\n    indexObj = JSON.parse(indexData.content || '[]');\\n}\\nlet index = indexObj.findIndex(it => it.title == MY_RULE.title);\\n\\nif (index > -1) {\\n    indexObj[index] = Object.assign(indexObj[index], newIndex)\\n} else {\\n    indexObj.push(newIndex)\\n}\\nlog(indexObj);\\ntry {\\n    const res = JSON.parse(fetch(upUrl, {\\n        body: {\\n            branch: 'main',\\n            message: 'upload',\\n            content: base64Encode(content),\\n            path: path,\\n            sha: sha\\n        },\\n        headers: {\\n            \\\"Authorization\\\": `token ${token}`,\\n            'Content-Type': 'application/json; charset=utf-8',\\n        },\\n        method: \\\"PUT\\\"\\n    }));\\n    const res2 = JSON.parse(fetch(indexUrl, {\\n        body: {\\n            branch: 'main',\\n            message: 'upload',\\n            content: base64Encode(JSON.stringify(indexObj)),\\n            path: indexFile,\\n            sha: indexData.sha\\n        },\\n        headers: {\\n            \\\"Authorization\\\": `token ${token}`,\\n            'Content-Type': 'application/json; charset=utf-8',\\n        },\\n        method: \\\"PUT\\\"\\n    }));\\n    log(res2.content.download_url);\\n    // 直接取得返回的图片地址\\n    if (res.content.download_url) {\\n        if (noCopy) {\\n            return \\\"提交成功\\\";\\n        }\\n        if (MY_EXTRA) {\\n            copy(pass + MY_EXTRA.replace(/\\\\$\\\\{repo\\\\}/g, repo).replace(/\\\\$\\\\{path\\\\}/g, path));\\n        } else {\\n            copy(pass + res.content.download_url);\\n        }\\n    } else {\\n        return new Error(res.message);\\n    }\\n    return \\\"提交成功\\\";\\n} catch (e) {\\n    return \\\"提交失败:\\\" + e.toString();\\n}*/\\nconst GithubAPI = $.require(\\\"GithubAPI?rule=Github仓库\\\");\\n$.exports = function(repo, token, MY_RULE, config) {\\n    let pass, path;\\n    if (Array.isArray(MY_RULE)) {\\n        path = \\\"rules/\\\" + MY_RULE[0].group + \\\".json\\\";\\n        pass = \\\"海阔视界首页合集规则【\\\" + MY_RULE[0].group + \\\"】￥home_rule_url￥\\\";\\n    } else {\\n        path = \\\"compilations/\\\" + MY_RULE.title + \\\".json\\\";\\n        pass = \\\"海阔视界首页频道规则【\\\" + MY_RULE.title + \\\"】￥home9_rule_url￥\\\";\\n    }\\n    try {\\n        let res = GithubAPI.createFile(repo, token, path, JSON.stringify(MY_RULE));\\n        return \\\"上传成功\\\";\\n    } catch (e) {\\n        log(e.toString())\\n        return \\\"上传失败\\\"\\n    }\\n}\"}]","proxy":"","icon":""}