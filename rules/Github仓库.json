{"last_chapter_rule":"","pageList":[{"col_type":"movie_3","name":"注册表","path":"registry","rule":"js:\nconst txt_name = \"githubhikerckl\";\nconst password = \"hiker721\";\n\nfunction getRegistry() {\n    try {\n        let registry = post(\"https://a6.qikekeji.com/txt/data/detail/\", {\n            body: {\n                txt_name: txt_name,\n                password: password\n            }\n        });\n        let rd = JSON.parse(registry).data;\n        registry = JSON.parse(rd.txt_content)[0].content || \"\";\n        return {\n            content: JSON.parse(registry),\n            vid: rd.v_id\n        };\n    } catch {\n        return {\n            content: []\n        };\n    }\n}\n\nfunction setRegistry(registry) {\n    try {\n        let res = post(\"https://a6.qikekeji.com/txt/data/save/\", {\n            body: {\n                txt_name: txt_name,\n                password: password,\n                txt_content: JSON.stringify([{\n                    \"title\": \"注册表\",\n                    \"content\": JSON.stringify(registry.content)\n                }]),\n                v_id: registry.vid || \"\"\n            }\n        });\n        res = JSON.parse(res);\n        if (res.status === 1) {\n            clearMyVar(\"developer\");\n            return true;\n        }\n        return false;\n    } catch (e) {\n        log(e.toString());\n        return false\n    }\n}\n\n\nfunction getDeveloper(renovate) {\n    let developer = storage0.getMyVar(\"developer\", \"\");\n    if (!developer || renovate) {\n        developer = getRegistry().content;\n        storage0.putMyVar(\"developer\", developer);\n    }\n    return developer;\n}\n\nfunction setDevInfo(uesrName, info) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    registry.content.splice(index, 1, Object.assign(registry.content[index], info));\n    return setRegistry(registry);\n}\n\nfunction addDev(uesr) {\n    let registry = getRegistry();\n    registry.content.push(uesr);\n    return setRegistry(registry);\n}\n\nfunction deleteDev(uesrName) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    registry.content.splice(index, 1);\n    return setRegistry(registry);\n}\n\nfunction moveDev(uesrName, newIndex) {\n    let registry = getRegistry();\n    let index = registry.content.findIndex(v => v.name === uesrName);\n    let info = registry.content.splice(index, 1)[0];\n    registry.content.splice(newIndex, 0, info);\n    return setRegistry(registry);\n}\n$.exports = {\n    setRegistry: setRegistry,\n    getRegistry: getRegistry,\n    getDeveloper: getDeveloper,\n    setDevInfo: setDevInfo,\n    addDev: addDev,\n    deleteDev: deleteDev,\n    moveDev: moveDev\n};"},{"col_type":"movie_3","name":"GithubAPI","path":"GithubAPI","rule":"js:\nconst HOST = \"api.github.com\";\nconst basicUrl = \"https://\" + HOST;\n\nfunction getContents(repo, path, error) {\n    let res = fetch(basicUrl + \"/repos/\" + repo + \"/contents/\" + (path || \"\"));\n    res = JSON.parse(res);\n    if (res.message && error) {\n        return error(res);\n    } else if (res.message) {\n        throw new Error(res.message);\n    }\n    return res;\n}\n\nfunction getRepoInfo(repo, token) {\n    let login = JSON.parse(fetch(basicUrl + \"/repos/\" + repo, {\n        headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            Authorization: \"token \" + token\n        }\n    }));\n    if (login.message) {\n        throw new Error(login.message);\n    }\n    return login;\n}\n\nfunction createFile(repo, token, path, content, sha) {\n    let upUrl = basicUrl + \"/repos/\" + repo + \"/contents/\" + path;\n    try {\n        if (sha === void 0) {\n            sha = getContents(repo, path).sha;\n        }\n    } catch (e) {\n        if (e.message != \"Not Found\") {\n            throw e;\n        }\n    }\n    const res = JSON.parse(fetch(upUrl, {\n        body: {\n            branch: 'main',\n            message: 'upload',\n            content: base64Encode(content || \"\"),\n            path: path,\n            sha: sha || \"\"\n        },\n        headers: {\n            \"Authorization\": \"token \" + token,\n            'Content-Type': 'application/json; charset=utf-8',\n        },\n        method: \"PUT\"\n    }));\n    if (res.message) {\n        throw new Error(res.message);\n    }\n    return res;\n}\n\nfunction deleteFile(repo, token, path, sha) {\n    let deleteUrl = basicUrl + \"/repos/\" + repo + \"/contents/\" + path;\n    if (!sha) {\n        sha = getContents(deleteUrl).sha;\n    }\n    let res = JSON.parse(fetch(deleteUrl, {\n        headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            Authorization: \"token \" + token\n        },\n        body: {\n            sha: sha,\n            message: \"删除规则\"\n        },\n        method: \"DELETE\",\n        withStatusCode: true\n    }));\n    if (res.statusCode === 200) {\n        java.lang.Thread.sleep(1650);\n        return true;\n    } else {\n        res = JSON.parse(res.body);\n        throw new Error(res.message);\n    }\n\n}\n\nfunction changeTable(repo, token, func, path) {\n    path = path || \"index.json\";\n    let summary = getContents(repo, path, (e) => {\n        if (e.message === \"Not Found\") {\n            return {\n                content: \"\"\n            };\n        } else {\n            throw new Error(\"摘要表获取失败\");\n        }\n    });\n    let table;\n    if (summary.content) {\n        table = JSON.parse(base64Decode(summary.content));\n        if(!Array.isArray(table.rules)){\n            table.rules=[];\n        }\n    } else {\n        table = {\n            rules: []\n        };\n    }\n    createFile(repo, token, \"index.json\", JSON.stringify(func(table)), summary.sha || \"\");\n}\n$.exports = {\n    getContents: getContents,\n    getRepoInfo: getRepoInfo,\n    createFile: createFile,\n    deleteFile: deleteFile,\n    changeTable: changeTable\n}"},{"col_type":"movie_3","name":"提交规则","path":"submit","rule":"const GithubAPI = $.require(\"GithubAPI?rule=Github仓库\");\nconst dirEnum = $.require(\"directoryEnum.json?rule=Github仓库\");\n$.exports = function(repo, token, MY_RULE, config) {\n    let pass, path, isRule;\n    if (Array.isArray(MY_RULE)) {\n        path = dirEnum.SET+ MY_RULE[0].group + \".json\";\n        //pass = \"海阔视界首页合集规则【\" + MY_RULE[0].group + \"】￥home_rule_url￥\";\n    } else {\n        isRule = true;\n        path = dirEnum.RULE+ MY_RULE.title + \".json\";\n        //pass = \"海阔视界首页频道规则【\" + MY_RULE.title + \"】￥home_rule_url￥\";\n    }\n\n    try {\n        if (isRule) {\n            GithubAPI.changeTable(repo, token, table => {\n                let newIndex = {\n                    title: MY_RULE.title,\n                    icon: MY_RULE.icon,\n                    version: MY_RULE.version,\n                    author: MY_RULE.author,\n                    type: MY_RULE.type,\n                    group: MY_RULE.group,\n                    url: MY_RULE.url\n                };\n                let index = table.rules.findIndex(it => it.title == MY_RULE.title);\n                if (index > -1) {\n                    table.rules.splice(index, 1, newIndex);\n                } else {\n                    table.rules.push(newIndex);\n                }\n                return table;\n            });\n            java.lang.Thread.sleep(350);\n        }\n        GithubAPI.createFile(repo, token, path, JSON.stringify(MY_RULE));\n        return \"上传成功\";\n    } catch (e) {\n        log(e.toString());\n        return \"上传失败\";\n    }\n}"},{"col_type":"movie_3","name":"注册","path":"register","rule":"js:\nvar d = [];\naddListener(\"onClose\", $.toString(() => {\n    clearMyVar(\"ps_name\");\n    clearMyVar(\"ps_repo\");\n    clearMyVar(\"ps_token\");\n}));\n\nsetPageTitle(\"注册/登陆\");\nd.push({\n    col_type: \"input\",\n    desc: \"展示名称\",\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_name\", input);\n        }),\n        titleVisible: false\n    }\n});\nd.push({\n    col_type: \"input\",\n    desc: \"github用户名/仓库名\",\n    extra: {\n        onChange: $.toString(() => {\n            putMyVar(\"ps_repo\", input);\n        }),\n        titleVisible: false,\n    }\n});\n\nd.push({\n    col_type: \"input\",\n    desc: \"token\",\n    extra: {\n        type: \"password\",\n        onChange: $.toString(() => {\n            putMyVar(\"ps_token\", input);\n        }),\n        titleVisible: false,\n    }\n});\nd.push({\n    title: \"注册/登录\",\n    url: $(\"#noLoading#\").lazyRule(() => {\n        showLoading(\"正在注册/登录...\");\n        let name = getMyVar(\"ps_name\", \"\");\n        if (name == \"\") {\n            return \"toast://用户名不能为空\"\n        }\n        let repo = getMyVar(\"ps_repo\", \"\");\n        if (repo == \"\") {\n            return \"toast://repo不能为空\"\n        }\n\n        let token = getMyVar(\"ps_token\", \"\");\n        if (token == \"\") {\n            return \"toast://token不能为空\"\n        }\n        let user = {\n            name: name,\n            repo: repo,\n            token: token\n        };\n        const GithubAPI = $.require(\"GithubAPI\");\n        const Registry = $.require(\"registry\");\n        developer = Registry.getDeveloper(true);\n        let index = developer.findIndex(x => x.name === name && x.repo === repo);\n\n        if (index !== -1) {\n            try {\n                GithubAPI.getRepoInfo(repo, token);\n                storage0.setItem(\"user\", user);\n                back();                \n                return \"toast://登录成功\";\n            } catch (e) {\n                hideLoading();\n                return \"toast://登录失败：\" + e.toString();\n            }\n\n        } else if (developer.some(v => v.name === name || v.repo === repo)) {\n            hideLoading();\n            return \"toast://仓库已经存在或用户名已经存在\";\n        } else {\n            try {\n                if (!(GithubAPI.getRepoInfo(repo, token).private === false)) {\n                    return \"toast://注册失败：私密仓库\";\n                }\n            } catch (e) {\n                return \"toast://仓库验证失败:\" + e.toString();\n            }\n            if (Registry.addDev(user)) {\n                storage0.setItem(\"user\", user);\n                back();\n                return \"toast://注册成功\";\n            }\n            hideLoading();\n            return \"toast://注册失败\";\n        }\n\n    }),\n    col_type: \"text_center_1\",\n});\nsetResult(d);"},{"col_type":"movie_3","name":"工具","path":"utils","rule":"js:\nfunction Color(text, color) {\n    return text.toString().fontcolor(color);\n}\n\nfunction HtmlTag(tag, text) {\n    return \"<\" + tag + \">\" + text + \"</\" + tag + \">\";\n}\n\nfunction Rich(text) {\n    return \"““””\" + text;\n}\n\nfunction Small(text) {\n    return HtmlTag(\"small\", text);\n}\n$.exports = {\n    Color: Color,\n    HtmlTag: HtmlTag,\n    Rich: Rich,\n    Small: Small\n}"},{"col_type":"movie_3","name":"目录结构","path":"directoryEnum.json","rule":"{\n    \"RULE\": \"rules/\",\n    \"SET\":\"compilations/\",\n    \"HTML\": \"html/\",\n    \"JS\":\"JS/\"\n}"}],"title":"Github仓库","author":"@LoyDgIk","version":0,"type":"video","url":"hiker://empty##","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\nvar d = [];\naddListener(\"onRefresh\", () => clearMyVar(\"developer\"));\nlet developer = $.require(\"registry\").getDeveloper();\nconst {\n    Small,\n    Color,\n    Rich\n} = $.require(\"utils\");\nlet user = storage0.getItem(\"user\", \"\");\n\nif (user) {\n    let sel = [\"退出登录\", \"规则管理\", \"设置中心\", \"管理用户\"];\n    d.push({\n        title: user.name,\n        col_type: \"avatar\",\n        pic_url: \"hiker://images/icon_setting6\",\n        url: $(sel).select(() => {\n            if (input === \"退出登录\") {\n                clearItem(\"user\");\n                refreshPage();\n            } else if (input === \"管理用户\") {\n                return \"hiker://page/Usermanagement#noRecordHistory##noHistory#\";\n            } else if (input === \"设置中心\") {\n                return \"hiker://page/settings#noRecordHistory##noHistory#\";\n            } else {\n                return \"hiker://page/Rulemanagement#noRecordHistory##noHistory#\";\n            }\n        }),\n        extra: {\n            name: user.name\n        }\n    });\n} else {\n    d.push({\n        title: \"注册/登录\",\n        url: \"hiker://page/register#noRecordHistory##noHistory#\",\n        col_type: \"text_center_1\"\n    });\n}\nd.push({\n    col_type: 'text_1',\n    title: Rich(Small(\"现有 \" + Color(developer.length, \"#ff7000\") + \" 名开发者\")),\n    url: \"toast://喵喵喵?\",\n});\nfor (let it of developer) {\n    d.push({\n        title: it.name,\n        url: \"hiker://page/ruleList#noRecordHistory##noHistory#\",\n        pic_url: it.avatar,\n        col_type: \"icon_2_round\",\n        extra: {\n            repo: it.repo,\n        }\n    });\n}\n\nsetResult(d);","searchFind":"","search_url":"","group":"开发中心","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[{\"col_type\":\"movie_3\",\"name\":\"注册表\",\"path\":\"registry\",\"rule\":\"js:\\nconst txt_name = \\\"githubhikerckl\\\";\\nconst password = \\\"hiker721\\\";\\n\\nfunction getRegistry() {\\n    try {\\n        let registry = post(\\\"https://a6.qikekeji.com/txt/data/detail/\\\", {\\n            body: {\\n                txt_name: txt_name,\\n                password: password\\n            }\\n        });\\n        let rd = JSON.parse(registry).data;\\n        registry = JSON.parse(rd.txt_content)[0].content || \\\"\\\";\\n        return {\\n            content: JSON.parse(registry),\\n            vid: rd.v_id\\n        };\\n    } catch {\\n        return {\\n            content: []\\n        };\\n    }\\n}\\n\\nfunction setRegistry(registry) {\\n    try {\\n        let res = post(\\\"https://a6.qikekeji.com/txt/data/save/\\\", {\\n            body: {\\n                txt_name: txt_name,\\n                password: password,\\n                txt_content: JSON.stringify([{\\n                    \\\"title\\\": \\\"注册表\\\",\\n                    \\\"content\\\": JSON.stringify(registry.content)\\n                }]),\\n                v_id: registry.vid || \\\"\\\"\\n            }\\n        });\\n        res = JSON.parse(res);\\n        if (res.status === 1) {\\n            clearMyVar(\\\"developer\\\");\\n            return true;\\n        }\\n        return false;\\n    } catch (e) {\\n        log(e.toString());\\n        return false\\n    }\\n}\\n\\n\\nfunction getDeveloper(renovate) {\\n    let developer = storage0.getMyVar(\\\"developer\\\", \\\"\\\");\\n    if (!developer || renovate) {\\n        developer = getRegistry().content;\\n        storage0.putMyVar(\\\"developer\\\", developer);\\n    }\\n    return developer;\\n}\\n\\nfunction setDevInfo(uesrName, info) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    registry.content.splice(index, 1, Object.assign(registry.content[index], info));\\n    return setRegistry(registry);\\n}\\n\\nfunction addDev(uesr) {\\n    let registry = getRegistry();\\n    registry.content.push(uesr);\\n    return setRegistry(registry);\\n}\\n\\nfunction deleteDev(uesrName) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    registry.content.splice(index, 1);\\n    return setRegistry(registry);\\n}\\n\\nfunction moveDev(uesrName, newIndex) {\\n    let registry = getRegistry();\\n    let index = registry.content.findIndex(v => v.name === uesrName);\\n    let info = registry.content.splice(index, 1)[0];\\n    registry.content.splice(newIndex, 0, info);\\n    return setRegistry(registry);\\n}\\n$.exports = {\\n    setRegistry: setRegistry,\\n    getRegistry: getRegistry,\\n    getDeveloper: getDeveloper,\\n    setDevInfo: setDevInfo,\\n    addDev: addDev,\\n    deleteDev: deleteDev,\\n    moveDev: moveDev\\n};\"},{\"col_type\":\"movie_3\",\"name\":\"GithubAPI\",\"path\":\"GithubAPI\",\"rule\":\"js:\\nconst HOST = \\\"api.github.com\\\";\\nconst basicUrl = \\\"https://\\\" + HOST;\\n\\nfunction getContents(repo, path, error) {\\n    let res = fetch(basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + (path || \\\"\\\"));\\n    res = JSON.parse(res);\\n    if (res.message && error) {\\n        return error(res);\\n    } else if (res.message) {\\n        throw new Error(res.message);\\n    }\\n    return res;\\n}\\n\\nfunction getRepoInfo(repo, token) {\\n    let login = JSON.parse(fetch(basicUrl + \\\"/repos/\\\" + repo, {\\n        headers: {\\n            Accept: \\\"application/vnd.github.v3+json\\\",\\n            Authorization: \\\"token \\\" + token\\n        }\\n    }));\\n    if (login.message) {\\n        throw new Error(login.message);\\n    }\\n    return login;\\n}\\n\\nfunction createFile(repo, token, path, content, sha) {\\n    let upUrl = basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + path;\\n    try {\\n        if (sha === void 0) {\\n            sha = getContents(repo, path).sha;\\n        }\\n    } catch (e) {\\n        if (e.message != \\\"Not Found\\\") {\\n            throw e;\\n        }\\n    }\\n    const res = JSON.parse(fetch(upUrl, {\\n        body: {\\n            branch: 'main',\\n            message: 'upload',\\n            content: base64Encode(content || \\\"\\\"),\\n            path: path,\\n            sha: sha || \\\"\\\"\\n        },\\n        headers: {\\n            \\\"Authorization\\\": \\\"token \\\" + token,\\n            'Content-Type': 'application/json; charset=utf-8',\\n        },\\n        method: \\\"PUT\\\"\\n    }));\\n    if (res.message) {\\n        throw new Error(res.message);\\n    }\\n    return res;\\n}\\n\\nfunction deleteFile(repo, token, path, sha) {\\n    let deleteUrl = basicUrl + \\\"/repos/\\\" + repo + \\\"/contents/\\\" + path;\\n    if (!sha) {\\n        sha = getContents(deleteUrl).sha;\\n    }\\n    let res = JSON.parse(fetch(deleteUrl, {\\n        headers: {\\n            Accept: \\\"application/vnd.github.v3+json\\\",\\n            Authorization: \\\"token \\\" + token\\n        },\\n        body: {\\n            sha: sha,\\n            message: \\\"删除规则\\\"\\n        },\\n        method: \\\"DELETE\\\",\\n        withStatusCode: true\\n    }));\\n    if (res.statusCode === 200) {\\n        java.lang.Thread.sleep(1650);\\n        return true;\\n    } else {\\n        res = JSON.parse(res.body);\\n        throw new Error(res.message);\\n    }\\n\\n}\\n\\nfunction changeTable(repo, token, func, path) {\\n    path = path || \\\"index.json\\\";\\n    let summary = getContents(repo, path, (e) => {\\n        if (e.message === \\\"Not Found\\\") {\\n            return {\\n                content: \\\"\\\"\\n            };\\n        } else {\\n            throw new Error(\\\"摘要表获取失败\\\");\\n        }\\n    });\\n    let table;\\n    if (summary.content) {\\n        table = JSON.parse(base64Decode(summary.content));\\n        if(!Array.isArray(table.rules)){\\n            table.rules=[];\\n        }\\n    } else {\\n        table = {\\n            rules: []\\n        };\\n    }\\n    createFile(repo, token, \\\"index.json\\\", JSON.stringify(func(table)), summary.sha || \\\"\\\");\\n}\\n$.exports = {\\n    getContents: getContents,\\n    getRepoInfo: getRepoInfo,\\n    createFile: createFile,\\n    deleteFile: deleteFile,\\n    changeTable: changeTable\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"提交规则\",\"path\":\"submit\",\"rule\":\"const GithubAPI = $.require(\\\"GithubAPI?rule=Github仓库\\\");\\nconst dirEnum = $.require(\\\"directoryEnum.json?rule=Github仓库\\\");\\n$.exports = function(repo, token, MY_RULE, config) {\\n    let pass, path, isRule;\\n    if (Array.isArray(MY_RULE)) {\\n        path = dirEnum.SET+ MY_RULE[0].group + \\\".json\\\";\\n        //pass = \\\"海阔视界首页合集规则【\\\" + MY_RULE[0].group + \\\"】￥home_rule_url￥\\\";\\n    } else {\\n        isRule = true;\\n        path = dirEnum.RULE+ MY_RULE.title + \\\".json\\\";\\n        //pass = \\\"海阔视界首页频道规则【\\\" + MY_RULE.title + \\\"】￥home_rule_url￥\\\";\\n    }\\n\\n    try {\\n        if (isRule) {\\n            GithubAPI.changeTable(repo, token, table => {\\n                let newIndex = {\\n                    title: MY_RULE.title,\\n                    icon: MY_RULE.icon,\\n                    version: MY_RULE.version,\\n                    author: MY_RULE.author,\\n                    type: MY_RULE.type,\\n                    group: MY_RULE.group,\\n                    url: MY_RULE.url\\n                };\\n                let index = table.rules.findIndex(it => it.title == MY_RULE.title);\\n                if (index > -1) {\\n                    table.rules.splice(index, 1, newIndex);\\n                } else {\\n                    table.rules.push(newIndex);\\n                }\\n                return table;\\n            });\\n            java.lang.Thread.sleep(350);\\n        }\\n        GithubAPI.createFile(repo, token, path, JSON.stringify(MY_RULE));\\n        return \\\"上传成功\\\";\\n    } catch (e) {\\n        log(e.toString());\\n        return \\\"上传失败\\\";\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"注册\",\"path\":\"register\",\"rule\":\"js:\\nvar d = [];\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"ps_name\\\");\\n    clearMyVar(\\\"ps_repo\\\");\\n    clearMyVar(\\\"ps_token\\\");\\n}));\\n\\nsetPageTitle(\\\"注册/登陆\\\");\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"展示名称\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_name\\\", input);\\n        }),\\n        titleVisible: false\\n    }\\n});\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"github用户名/仓库名\\\",\\n    extra: {\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_repo\\\", input);\\n        }),\\n        titleVisible: false,\\n    }\\n});\\n\\nd.push({\\n    col_type: \\\"input\\\",\\n    desc: \\\"token\\\",\\n    extra: {\\n        type: \\\"password\\\",\\n        onChange: $.toString(() => {\\n            putMyVar(\\\"ps_token\\\", input);\\n        }),\\n        titleVisible: false,\\n    }\\n});\\nd.push({\\n    title: \\\"注册/登录\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        showLoading(\\\"正在注册/登录...\\\");\\n        let name = getMyVar(\\\"ps_name\\\", \\\"\\\");\\n        if (name == \\\"\\\") {\\n            return \\\"toast://用户名不能为空\\\"\\n        }\\n        let repo = getMyVar(\\\"ps_repo\\\", \\\"\\\");\\n        if (repo == \\\"\\\") {\\n            return \\\"toast://repo不能为空\\\"\\n        }\\n\\n        let token = getMyVar(\\\"ps_token\\\", \\\"\\\");\\n        if (token == \\\"\\\") {\\n            return \\\"toast://token不能为空\\\"\\n        }\\n        let user = {\\n            name: name,\\n            repo: repo,\\n            token: token\\n        };\\n        const GithubAPI = $.require(\\\"GithubAPI\\\");\\n        const Registry = $.require(\\\"registry\\\");\\n        developer = Registry.getDeveloper(true);\\n        let index = developer.findIndex(x => x.name === name && x.repo === repo);\\n\\n        if (index !== -1) {\\n            try {\\n                GithubAPI.getRepoInfo(repo, token);\\n                storage0.setItem(\\\"user\\\", user);\\n                back();                \\n                return \\\"toast://登录成功\\\";\\n            } catch (e) {\\n                hideLoading();\\n                return \\\"toast://登录失败：\\\" + e.toString();\\n            }\\n\\n        } else if (developer.some(v => v.name === name || v.repo === repo)) {\\n            hideLoading();\\n            return \\\"toast://仓库已经存在或用户名已经存在\\\";\\n        } else {\\n            try {\\n                if (!(GithubAPI.getRepoInfo(repo, token).private === false)) {\\n                    return \\\"toast://注册失败：私密仓库\\\";\\n                }\\n            } catch (e) {\\n                return \\\"toast://仓库验证失败:\\\" + e.toString();\\n            }\\n            if (Registry.addDev(user)) {\\n                storage0.setItem(\\\"user\\\", user);\\n                back();\\n                return \\\"toast://注册成功\\\";\\n            }\\n            hideLoading();\\n            return \\\"toast://注册失败\\\";\\n        }\\n\\n    }),\\n    col_type: \\\"text_center_1\\\",\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"utils\",\"rule\":\"js:\\nfunction Color(text, color) {\\n    return text.toString().fontcolor(color);\\n}\\n\\nfunction HtmlTag(tag, text) {\\n    return \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n}\\n\\nfunction Rich(text) {\\n    return \\\"““””\\\" + text;\\n}\\n\\nfunction Small(text) {\\n    return HtmlTag(\\\"small\\\", text);\\n}\\n$.exports = {\\n    Color: Color,\\n    HtmlTag: HtmlTag,\\n    Rich: Rich,\\n    Small: Small\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"目录结构\",\"path\":\"directoryEnum.json\",\"rule\":\"{\\n    \\\"RULE\\\": \\\"rules/\\\",\\n    \\\"SET\\\":\\\"compilations/\\\",\\n    \\\"HTML\\\": \\\"html/\\\",\\n    \\\"JS\\\":\\\"JS/\\\"\\n}\"}]","proxy":"","icon":""}