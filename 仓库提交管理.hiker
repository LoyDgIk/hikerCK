海阔视界规则分享，当前分享的是：小程序￥home_rule_v2￥base64://@仓库提交管理@eyJsYXN0X2NoYXB0ZXJfcnVsZSI6IiIsInBhZ2VMaXN0IjpbeyJjb2xfdHlwZSI6InRleHRfMSIsIm5hbWUiOiJob21lIiwicGF0aCI6ImhvbWUiLCJydWxlIjoianM6XG52YXIgZCA9IFtdO1xuZC5wdXNoKHtcbiAgICB0aXRsZTogJzxmb250IGNvbG9yPVwiIzEzQjYxQlwiPuKWkCA8L2ZvbnQ+PGI+5L2/55So6K+05piOPGI+JyxcbiAgICB1cmw6IFwiaGlrZXI6Ly9lbXB0eVwiLFxuICAgIGNvbF90eXBlOiBcInJpY2hfdGV4dFwiLFxufSk7XG5kLnB1c2goe1xuICAgIHVybDogJChcIiNub0xvYWRpbmcjXCIpLmxhenlSdWxlKCgpID0+IHtcbiAgICAgICAgbGV0IHJ1bGUgPSAkLnJlcXVpcmUoXCLmj5DkuqTkupHku5PlupPop4TliJlcIikucGFzcztcbiAgICAgICAgbGV0IHBhc3MgPSBcIua1t+mYlOinhueVjOinhOWImeWIhuS6q++8jOW9k+WJjeWIhuS6q+eahOaYr++8muaPkOS6pOS6keS7k+W6k+inhOWIme+/pXB1Ymxpc2jvv6VcIiArIGJhc2U2NEVuY29kZShydWxlKTtcbiAgICAgICAgcmV0dXJuIFwicnVsZTovL1wiICsgYmFzZTY0RW5jb2RlKHBhc3MpO1xuICAgIH0pLFxuICAgIGNvbF90eXBlOiBcInRleHRfMVwiLFxuICAgIHRpdGxlOiBcIuWPr+S7peiuvue9ruS4jeWQjOaPkOS6pOS7k+W6k+aWueW8j1vngrnmiJHlr7zlhaXmj5DkuqTop4TliJldXCIsXG4gICAgZXh0cmE6IHtcbiAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXG4gICAgfVxufSk7XG5kLnB1c2goe1xuICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XCIjMTNCNjFCXCI+4paQIDwvZm9udD48Yj7op4TliJnliJfooag8Yj4nLFxuICAgIGNvbF90eXBlOiBcInJpY2hfdGV4dFwiLFxufSk7XG5sZXQgYXJyID0gJC5yZXF1aXJlKFwiY29uZmlnc1wiKS5nZXRKc29uKCk7XG5mb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpdCA9IGFycltpXTtcbiAgICBkLnB1c2goe1xuICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnTxiPiAgJyArIGl0Lm5hbWUgKyAnPGI+JyArIChpdC5mb3JiaWRkZW4gPyBcIiAj4oCc4oCc56aB55So4oCd4oCdXCIuc21hbGwoKSA6IFwiXCIpLFxuICAgICAgICB1cmw6ICQoW1wi57yW6L6RXCIsIFwi6LSm5Y+3XCIsIFwi5YiG5LqrXCIsIFwi56aB55SoL+WQr+eUqFwiXSkuc2VsZWN0KChpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcIue8lui+kVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaGlrZXI6Ly9wYWdlL2l0ZW0jbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSBcIui0puWPt1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaGlrZXI6Ly9wYWdlL3Bhc3N3b3JkI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1wiO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gXCLliIbkuqtcIikge1xuICAgICAgICAgICAgICAgIGxldCBvcHMgPSBnZXRQYXN0ZXMoKTtcbiAgICAgICAgICAgICAgICBvcHMudW5zaGlmdChcIuWujOaVtOWPo+S7pFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gJChvcHMpLnNlbGVjdCgoaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJ1bGUgPSAkLnJlcXVpcmUoXCJjb25maWdzXCIpLmdldEpzb24oKVtpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUudXNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5wYXNzd29yZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5mb3JiaWRkZW4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBydWxlYjY0ID0gYmFzZTY0RW5jb2RlKEpTT04uc3RyaW5naWZ5KHJ1bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGdldFBhc3MgPSAobmFtZSwgcnVsZSwgdHlwZSkgPT4gXCLmtbfpmJTop4bnlYzvvIzjgIxcIiArIG5hbWUgKyBcIuOAjeaPkOS6pOinhOWIme+8jOWkjeWItuaVtOadoeWPo+S7pOaJk+W8gOi9r+S7tuWwseS8muiHquWKqOWvvOWFpSRcIiArIHJ1bGUgKyBcIiRcIiArIHR5cGUgKyBcIkBpbXBvcnQ9anM6JC5yZXF1aXJlKCdpbXBvcnQ/cnVsZT0nK1wiICsgSlNPTi5zdHJpbmdpZnkoTVlfUlVMRS50aXRsZSkgKyBcIikoaW5wdXQpXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSBcIuWujOaVtOWPo+S7pFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb3B5Oi8vXCIgKyBnZXRQYXNzKHJ1bGUubmFtZSwgcnVsZWI2NCwgXCJhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBzaGFyZVBhc3RlKHJ1bGViNjQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvcHk6Ly9cIiArIGdldFBhc3MocnVsZS5uYW1lLCB1LCBcImJcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBpbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBhcnIgPSAkLnJlcXVpcmUoXCJjb25maWdzXCIpLmdldEpzb24oKTtcbiAgICAgICAgICAgICAgICBsZXQgcnVsZSA9IGFycltpbmRleF07XG4gICAgICAgICAgICAgICAgcnVsZS5mb3JiaWRkZW4gPSAhcnVsZS5mb3JiaWRkZW47XG4gICAgICAgICAgICAgICAgJC5yZXF1aXJlKFwiY29uZmlnc1wiKS5zYXZlSnNvbihhcnIpO1xuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAvL3JldHVybiBcInRvYXN0Oi8vXCIgKyAocnVsZS5mb3JiaWRkZW4gPyBcIuemgeeUqFwiIDogXCLlkK/nlKhcIikgKyBydWxlLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGkpLFxuICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0XzFcIixcbiAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgIGk6IGksXG4gICAgICAgICAgICBwYWdlVGl0bGU6IGl0Lm5hbWVcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5cbmQucHVzaCh7XG4gICAgdGl0bGU6IFwi5paw5aKeXCIsXG4gICAgdXJsOiBcImhpa2VyOi8vcGFnZS9pdGVtI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1wiLFxuICAgIGNvbF90eXBlOiBcInRleHRfMlwiLFxuICAgIGV4dHJhOiB7XG4gICAgICAgIHBhZ2VUaXRsZTogXCLmlrDlop7mj5DkuqTop4TliJlcIlxuICAgIH1cbn0pO1xuZC5wdXNoKHtcbiAgICB0aXRsZTogXCLnvJbovpHmlofku7ZcIixcbiAgICB1cmw6IFwiZWRpdEZpbGU6Ly9cIiArICQucmVxdWlyZShcImNvbmZpZ3NcIikucGF0aCxcbiAgICBjb2xfdHlwZTogXCJ0ZXh0XzJcIixcbiAgICBkZXNjOiBcIlwiLFxuICAgIHBpY191cmw6IFwiXCJcbn0pO1xuXG5zZXRSZXN1bHQoZCk7In0seyJjb2xfdHlwZSI6Im1vdmllXzMiLCJuYW1lIjoiaXRlbSIsInBhdGgiOiJpdGVtIiwicnVsZSI6ImpzOlxudmFyIGQgPSBbXTtcbmFkZExpc3RlbmVyKFwib25DbG9zZVwiLCAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICBjbGVhck15VmFyKFwicHNfbmFtZVwiKTtcbiAgICBjbGVhck15VmFyKFwicHNfanNcIik7XG59KSk7XG5cbmxldCBpbmRleCA9IE1ZX1BBUkFNUy5pO1xubGV0IGFyciA9ICQucmVxdWlyZShcImNvbmZpZ3NcIikuZ2V0SnNvbigpO1xubGV0IG9iajtcbmlmIChpbmRleCAhPT0gdm9pZCgwKSkge1xuICAgIG9iaiA9IGFycltpbmRleF07XG4gICAgc2V0UGFnZVRpdGxlKFwi57yW6L6R6KeE5YiZOlwiICsgb2JqLm5hbWUpO1xufSBlbHNlIHtcbiAgICBvYmogPSB7fTtcbiAgICBzZXRQYWdlVGl0bGUoXCLmlrDlu7rop4TliJlcIik7XG59XG5cbmQucHVzaCh7XG4gICAgY29sX3R5cGU6IFwiaW5wdXRcIixcbiAgICBkZXNjOiBcIuWPluS4quWQjeWtl1wiLFxuICAgIGV4dHJhOiB7XG4gICAgICAgIG9uQ2hhbmdlOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgIHB1dE15VmFyKFwicHNfbmFtZVwiLCBpbnB1dCk7XG4gICAgICAgIH0pLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG9iai5uYW1lLFxuICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlXG4gICAgfVxufSk7XG5kLnB1c2goe1xuICAgIGNvbF90eXBlOiBcImlucHV0XCIsXG4gICAgZGVzYzogXCJKU+S7o+eggVwiLFxuICAgIGV4dHJhOiB7XG4gICAgICAgIHR5cGU6IFwidGV4dGFyZWFcIixcbiAgICAgICAgaGVpZ2h0OiAzLFxuICAgICAgICBoaWdobGlnaHQ6IHRydWUsXG4gICAgICAgIG9uQ2hhbmdlOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgIHB1dE15VmFyKFwicHNfanNcIiwgaW5wdXQpO1xuICAgICAgICB9KSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBvYmouanMsXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXG4gICAgfVxufSk7XG5cbmQucHVzaCh7XG4gICAgdGl0bGU6IFwi5Yig6ZmkXCIsXG4gICAgdXJsOiAkKFwiI25vTG9hZGluZyNcIikubGF6eVJ1bGUoKGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCgwKSkge1xuICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/mraTpobnml6Dms5XliKDpmaRcIlxuICAgICAgICB9XG4gICAgICAgIGNvbmZpcm0oe1xuICAgICAgICAgICAgdGl0bGU6IFwi5rip6aao5o+Q56S6XCIsXG4gICAgICAgICAgICBjb250ZW50OiBcIuehruWumuimgeWIoOmZpOatpOinhOWImeWQl++8n+azqOaEj+WIoOmZpOWQjuaXoOazleaBouWkjVwiLFxuICAgICAgICAgICAgY29uZmlybTogJC50b1N0cmluZygoaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgYXJyID0gJC5yZXF1aXJlKFwiY29uZmlnc1wiKS5nZXRKc29uKCk7XG4gICAgICAgICAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgJC5yZXF1aXJlKFwiY29uZmlnc1wiKS5zYXZlSnNvbihhcnIpO1xuICAgICAgICAgICAgICAgIGJhY2sodHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cIjtcbiAgICAgICAgICAgIH0sIGluZGV4KVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFwiaGlrZXI6Ly9lbXB0eVwiXG4gICAgfSwgaW5kZXgpLFxuICAgIGNvbF90eXBlOiBcInRleHRfMlwiLFxufSk7XG5cbmQucHVzaCh7XG4gICAgdGl0bGU6IFwi5L+d5a2YXCIsXG4gICAgdXJsOiAkKFwiI25vTG9hZGluZyNcIikubGF6eVJ1bGUoKGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBuYW1lID0gZ2V0TXlWYXIoXCJwc19uYW1lXCIsIFwiXCIpO1xuICAgICAgICBpZiAobmFtZSA9PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+WQjeWtl+W+l+acieS4gOS4quWQp1wiXG4gICAgICAgIH1cbiAgICAgICAgbGV0IGpzID0gZ2V0TXlWYXIoXCJwc19qc1wiLCBcIlwiKTtcbiAgICAgICAgaWYgKGpzID09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcInRvYXN0Oi8vSlPku6PnoIHkuI3og73kuLrnqbpcIlxuICAgICAgICB9XG4gICAgICAgIGxldCBhcnIgPSAkLnJlcXVpcmUoXCJjb25maWdzXCIpLmdldEpzb24oKTtcbiAgICAgICAgbGV0IG9iajEgPSB7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAganM6IGpzXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCgwKSkge1xuICAgICAgICAgICAgaWYgKGFyci5zb21lKHYgPT4gdi5uYW1lID09PSBuYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInRvYXN0Oi8v5bey57uP5a2Y5Zyo6K+l6KeE5YiZXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhcnIudW5zaGlmdChvYmoxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9iajEgPSBPYmplY3QuYXNzaWduKGFycltpbmRleF0sIG9iajEpO1xuICAgICAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSwgb2JqMSk7XG4gICAgICAgIH1cbiAgICAgICAgJC5yZXF1aXJlKFwiY29uZmlnc1wiKS5zYXZlSnNvbihhcnIpO1xuICAgICAgICBiYWNrKHRydWUpO1xuICAgICAgICByZXR1cm4gXCJ0b2FzdDovL+S/neWtmOaIkOWKn1wiO1xuICAgIH0sIGluZGV4KSxcbiAgICBjb2xfdHlwZTogXCJ0ZXh0XzJcIixcbn0pO1xuXG5zZXRSZXN1bHQoZCk7In0seyJjb2xfdHlwZSI6Im1vdmllXzMiLCJuYW1lIjoiY29uZmlncyIsInBhdGgiOiJjb25maWdzIiwicnVsZSI6ImNvbnN0IHBhdGggPSBcImhpa2VyOi8vZmlsZXMvcnVsZXMvc3RvcmVob3VzZS5qc29uXCI7XG5cbmZ1bmN0aW9uIGdldEpzb24oKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZmV0Y2gocGF0aCkgfHwgXCJbXVwiKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGRlbGV0ZUZpbGUocGF0aCk7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNhdmVKc29uKGpzb24pIHtcbiAgICB3cml0ZUZpbGUocGF0aCwgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xufVxuZnVuY3Rpb24gZ2V0VXNlZnVsSnNvbigpe1xuICAgIHJldHVybiBnZXRKc29uKCkuZmlsdGVyKHY9PiF2LmZvcmJpZGRlbik7XG59XG4kLmV4cG9ydHMgPSB7XG4gICAgZ2V0SnNvbjogZ2V0SnNvbixcbiAgICBzYXZlSnNvbjogc2F2ZUpzb24sXG4gICAgZ2V0VXNlZnVsSnNvbjogZ2V0VXNlZnVsSnNvbixcbiAgICBwYXRoOiBwYXRoXG59OyJ9LHsiY29sX3R5cGUiOiJtb3ZpZV8zIiwibmFtZSI6InBhc3N3b3JkIiwicGF0aCI6InBhc3N3b3JkIiwicnVsZSI6ImpzOlxuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBkID0gW107XG4gICAgYWRkTGlzdGVuZXIoXCJvbkNsb3NlXCIsICQudG9TdHJpbmcoKCkgPT4ge1xuICAgICAgICBjbGVhck15VmFyKFwicHNfdXNlclwiKTtcbiAgICAgICAgY2xlYXJNeVZhcihcInBzX3Bhc3N3b3JkXCIpO1xuICAgIH0pKTtcbiAgICBsZXQgaW5kZXggPSBNWV9QQVJBTVMuaTtcbiAgICBsZXQgYXJyID0gJC5yZXF1aXJlKFwiY29uZmlnc1wiKS5nZXRKc29uKCk7XG4gICAgbGV0IHJ1bGVuYW1lID0gZ2V0UGFyYW0oXCJuYW1lXCIsXCJcIikgfHwgTVlfUEFSQU1TLm5hbWU7XG4gICAgaWYgKGluZGV4ID09PSB2b2lkKDApICYmIHJ1bGVuYW1lKSB7XG4gICAgICAgIGluZGV4ID0gYXJyLmZpbmRJbmRleCh2ID0+IHYubmFtZSA9PT0gcnVsZW5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgIHRvYXN0KFwi6L+Y5rKh5pyJ6K+l5o+Q5Lqk6KeE5YiZ77yaXCIgKyBydWxlbmFtZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgb2JqID0gYXJyW2luZGV4XSB8fCB7fTtcbiAgICBzZXRQYWdlVGl0bGUoXCLorr7nva7otKblj7c6XCIgKyBvYmoubmFtZSk7XG4gICAgZC5wdXNoKHtcbiAgICAgICAgY29sX3R5cGU6IFwiaW5wdXRcIixcbiAgICAgICAgZGVzYzogXCLnlKjmiLflkI1cIixcbiAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgIG9uQ2hhbmdlOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcInBzX3VzZXJcIiwgaW5wdXQpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IG9iai51c2VyLFxuICAgICAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgZC5wdXNoKHtcbiAgICAgICAgY29sX3R5cGU6IFwiaW5wdXRcIixcbiAgICAgICAgZGVzYzogXCLlr4bnoIFcIixcbiAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgIHR5cGU6IFwicGFzc3dvcmRcIixcbiAgICAgICAgICAgIG9uQ2hhbmdlOiAkLnRvU3RyaW5nKCgpID0+IHtcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcInBzX3Bhc3N3b3JkXCIsIGlucHV0KTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBvYmoucGFzc3dvcmQsXG4gICAgICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlLFxuICAgICAgICB9XG4gICAgfSk7XG4gICAgZC5wdXNoKHtcbiAgICAgICAgdGl0bGU6IFwi5L+d5a2YXCIsXG4gICAgICAgIHVybDogJChcIiNub0xvYWRpbmcjXCIpLmxhenlSdWxlKChpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IHVzZXIgPSBnZXRNeVZhcihcInBzX3VzZXJcIiwgXCJcIik7XG4gICAgICAgICAgICBpZiAodXNlciA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/nlKjmiLflkI3kuI3og73kuLrnqbpcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHBhc3N3b3JkID0gZ2V0TXlWYXIoXCJwc19wYXNzd29yZFwiLCBcIlwiKTtcbiAgICAgICAgICAgIGlmIChwYXNzd29yZCA9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/lr4bnoIHkuI3og73kuLrnqbpcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGFyciA9ICQucmVxdWlyZShcImNvbmZpZ3NcIikuZ2V0SnNvbigpO1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBhcnJbaW5kZXhdO1xuICAgICAgICAgICAgaXRlbS51c2VyID0gdXNlcjtcbiAgICAgICAgICAgIGl0ZW0ucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCgwKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInRvYXN0Oi8vaWTplJnor69cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSwgaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkLnJlcXVpcmUoXCJjb25maWdzXCIpLnNhdmVKc29uKGFycik7XG4gICAgICAgICAgICBiYWNrKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIFwidG9hc3Q6Ly/kv53lrZjmiJDlip9cIjtcbiAgICAgICAgfSwgaW5kZXgpLFxuICAgICAgICBjb2xfdHlwZTogXCJ0ZXh0X2NlbnRlcl8xXCIsXG4gICAgfSk7XG4gICAgc2V0UmVzdWx0KGQpO1xufSkoKSJ9LHsiY29sX3R5cGUiOiJtb3ZpZV8zIiwibmFtZSI6IuaPkOS6pOS6keS7k+W6k+inhOWImSIsInBhdGgiOiLmj5DkuqTkupHku5PlupPop4TliJkiLCJydWxlIjoiJC5leHBvcnRzLnJ1biA9IChydWxlVGl0bGUpID0+IHtcbiAgICBsZXQgcnVsZXMgPSAkLnJlcXVpcmUoXCJjb25maWdzP3J1bGU9XCIgKyBydWxlVGl0bGUpLmdldFVzZWZ1bEpzb24oKTtcbiAgICBpZiAocnVsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBcIuaPkOS6pOWksei0pTrov5jmsqHmnInorr7nva7mj5DkuqTop4TliJlcIjtcbiAgICB9XG4gICAgaWYgKHJ1bGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGV0IG5hbWVzID0gcnVsZXMubWFwKHYgPT4gdi5uYW1lKTtcbiAgICAgICAgbmFtZXMudW5zaGlmdChcIuKAnOKAnOaPkOS6pOWIsOaJgOacieS7k+W6k+KAneKAnVwiKTtcbiAgICAgICAgbGV0IGRlc2M7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KE1ZX1JVTEUpKSB7XG4gICAgICAgICAgICBkZXNjID0gXCLmj5DkuqTliIbnu4Q6XCIgKyBNWV9SVUxFWzBdLmdyb3VwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzYyA9IFwi5o+Q5Lqk54mI5pysOlwiICsgTVlfUlVMRS52ZXJzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHNob3dTZWxlY3RPcHRpb25zKHtcbiAgICAgICAgICAgIHRpdGxlOiBcIuivt+mAieaLqeS7k+W6k1tcIiArIGRlc2MgKyBcIl1cIixcbiAgICAgICAgICAgIG9wdGlvbnM6IG5hbWVzLFxuICAgICAgICAgICAgY29sOiAxLFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKE1ZX1JVTEUsIHJ1bGVUaXRsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBydWxlcyA9ICQucmVxdWlyZShcImNvbmZpZ3M/cnVsZT1cIiArIHJ1bGVUaXRsZSkuZ2V0VXNlZnVsSnNvbigpO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXCLigJzigJzmj5DkuqTliLDmiYDmnInku5PlupPigJ3igJ1cIikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3VjY2VzcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmFpbCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBydWxlIG9mIHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbihcIk1ZX1JVTEVcIiwgXCJNWV9BQ0NPVU5UXCIsIFwiTVlfUEFTU1dPUkRcIiwgcnVsZS5qcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gZnVuYyhNWV9SVUxFLCBydWxlLnVzZXIsIHJ1bGUucGFzc3dvcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5pbmNsdWRlcyhcInN1Y2Nlc3NcIikgfHwgcmVzLmluY2x1ZGVzKFwi5oiQ5YqfXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcy5wdXNoKHJ1bGUubmFtZSArIFwiOlwiICsgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFpbC5wdXNoKHJ1bGUubmFtZSArIFwiOlwiICsgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcyA9IGDmj5DkuqTnu5PmnpzvvJoke3N1Y2Nlc3MubGVuZ3RofeS4quaIkOWKn++8jCR7ZmFpbC5sZW5ndGh95Liq5aSx6LSlYDtcbiAgICAgICAgICAgICAgICAgICAgbG9nKHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICBsb2coXCLmiJDlip8k77yaXFxuXCIgKyBzdWNjZXNzLmpvaW4oXCJcXG5cXG5cIikpO1xuICAgICAgICAgICAgICAgICAgICBsb2coXCLlpLHotKUk77yaXFxuXCIgKyBmYWlsLmpvaW4oXCJcXG5cXG5cIikpO1xuICAgICAgICAgICAgICAgICAgICB0b2FzdChyZXNzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzLmZpbmQodiA9PiB2Lm5hbWUgPT09IGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oXCJNWV9SVUxFXCIsIFwiTVlfQUNDT1VOVFwiLCBcIk1ZX1BBU1NXT1JEXCIsIHJ1bGUuanMpO1xuICAgICAgICAgICAgICAgICAgICB0b2FzdChmdW5jKE1ZX1JVTEUsIHJ1bGUudXNlciwgcnVsZS5wYXNzd29yZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIE1ZX1JVTEUsIHJ1bGVUaXRsZSlcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBcIuinhOWImeiOt+WPluaIkOWKn++8jOW+hemAieaLqeaPkOS6pOeahOS7k+W6kyzor7fnqI3nrYkuLi5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzWzBdO1xuICAgICAgICBsZXQgZnVuYyA9IG5ldyBGdW5jdGlvbihcIk1ZX1JVTEVcIiwgXCJNWV9BQ0NPVU5UXCIsIFwiTVlfUEFTU1dPUkRcIiwgcnVsZS5qcyk7XG4gICAgICAgIHJldHVybiBmdW5jKE1ZX1JVTEUsIHJ1bGUudXNlciwgcnVsZS5wYXNzd29yZCk7XG4gICAgfVxufVxuJC5leHBvcnRzLnBhc3MgPSAkLnRvU3RyaW5nKChydWxlVGl0bGUpID0+ICQucmVxdWlyZShcIuaPkOS6pOS6keS7k+W6k+inhOWImT9ydWxlPVwiICsgcnVsZVRpdGxlKS5ydW4ocnVsZVRpdGxlKSwgTVlfUlVMRS50aXRsZSk7In0seyJjb2xfdHlwZSI6Im1vdmllXzMiLCJuYW1lIjoi5a+85YWlIiwicGF0aCI6ImltcG9ydCIsInJ1bGUiOiJqczpcbiQuZXhwb3J0cyA9IGZ1bmN0aW9uKHBhc3MpIHtcbiAgICB0cnkge1xuICAgICAgICBwYXNzID0gcGFzcy5zcGxpdChcIiRcIik7XG4gICAgICAgIGxldCBydWxlID0gcGFzc1sxXTtcbiAgICAgICAgbGV0IHR5cGUgPSBwYXNzWzJdO1xuICAgICAgICBpZiAodHlwZSA9PT0gXCJiXCIpIHtcbiAgICAgICAgICAgIHJ1bGUgPSBwYXJzZVBhc3RlKHJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIHJ1bGUgPSBKU09OLnBhcnNlKGJhc2U2NERlY29kZShydWxlKSk7XG4gICAgICAgIE1ZX1VSTCA9IG1vZHVsZS5pZDtcbiAgICAgICAgbGV0IHJ1bGVUaXRsZSA9IGdldFBhcmFtKFwicnVsZVwiKTtcbiAgICAgICAgbGV0IGFyciA9ICQucmVxdWlyZShcImNvbmZpZ3M/cnVsZT1cIiArIHJ1bGVUaXRsZSkuZ2V0SnNvbigpO1xuICAgICAgICBsZXQgaW5kZXggPSBhcnIuZmluZEluZGV4KHYgPT4gdi5uYW1lID09PSBydWxlLm5hbWUpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgcnVsZSA9IE9iamVjdC5hc3NpZ24oYXJyW2luZGV4XSwgcnVsZSk7XG4gICAgICAgICAgICBhcnIuc3BsaWNlKGluZGV4LCAxLCBydWxlKTtcbiAgICAgICAgICAgIHRvYXN0KFwi5bey5pu05paw5o+Q5Lqk6KeE5YiZ77yaXCIgKyBydWxlLm5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyLnVuc2hpZnQocnVsZSk7XG4gICAgICAgICAgICB0b2FzdChcIuW3suWvvOWFpeaPkOS6pOinhOWIme+8mlwiICsgcnVsZS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAkLnJlcXVpcmUoXCJjb25maWdzP3J1bGU9XCIgKyBydWxlVGl0bGUpLnNhdmVKc29uKGFycik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcbiAgICAgICAgdG9hc3QoXCLlr7zlhaXlpLHotKVcIik7XG4gICAgfVxufSJ9XSwidGl0bGUiOiLku5PlupPmj5DkuqTnrqHnkIYiLCJhdXRob3IiOiJATG95RGdJayIsInZlcnNpb24iOjMsInR5cGUiOiJ0b29sIiwidXJsIjoiaGlrZXI6Ly9lbXB0eSMjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyIsImNvbF90eXBlIjoidGV4dF8xIiwiY2xhc3NfbmFtZSI6IiIsImNsYXNzX3VybCI6IiIsImFyZWFfbmFtZSI6IiIsImFyZWFfdXJsIjoiIiwic29ydF9uYW1lIjoiIiwieWVhcl9uYW1lIjoiIiwic29ydF91cmwiOiIiLCJ5ZWFyX3VybCI6IiIsImZpbmRfcnVsZSI6ImpzOiQucmVxdWlyZShcImhvbWVcIik7Iiwic2VhcmNoRmluZCI6IiIsInNlYXJjaF91cmwiOiIiLCJncm91cCI6IuW8gOWPkeS4reW/gyIsImRldGFpbF9jb2xfdHlwZSI6Im1vdmllXzEiLCJkZXRhaWxfZmluZF9ydWxlIjoiIiwic2RldGFpbF9jb2xfdHlwZSI6Im1vdmllXzEiLCJzZGV0YWlsX2ZpbmRfcnVsZSI6IiIsInVhIjoibW9iaWxlIiwicHJlUnVsZSI6IiIsInBhZ2VzIjoiW3tcImNvbF90eXBlXCI6XCJ0ZXh0XzFcIixcIm5hbWVcIjpcImhvbWVcIixcInBhdGhcIjpcImhvbWVcIixcInJ1bGVcIjpcImpzOlxcbnZhciBkID0gW107XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFwiIzEzQjYxQlxcXCI+4paQIDwvZm9udD48Yj7kvb/nlKjor7TmmI48Yj4nLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcbn0pO1xcbmQucHVzaCh7XFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICBsZXQgcnVsZSA9ICQucmVxdWlyZShcXFwi5o+Q5Lqk5LqR5LuT5bqT6KeE5YiZXFxcIikucGFzcztcXG4gICAgICAgIGxldCBwYXNzID0gXFxcIua1t+mYlOinhueVjOinhOWImeWIhuS6q++8jOW9k+WJjeWIhuS6q+eahOaYr++8muaPkOS6pOS6keS7k+W6k+inhOWIme+/pXB1Ymxpc2jvv6VcXFwiICsgYmFzZTY0RW5jb2RlKHJ1bGUpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJydWxlOi8vXFxcIiArIGJhc2U2NEVuY29kZShwYXNzKTtcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgdGl0bGU6IFxcXCLlj6/ku6Xorr7nva7kuI3lkIzmj5DkuqTku5PlupPmlrnlvI9b54K55oiR5a+85YWl5o+Q5Lqk6KeE5YiZXVxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgfVxcbn0pO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcIiMxM0I2MUJcXFwiPuKWkCA8L2ZvbnQ+PGI+6KeE5YiZ5YiX6KGoPGI+JyxcXG4gICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcbn0pO1xcbmxldCBhcnIgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5nZXRKc29uKCk7XFxuZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgbGV0IGl0ID0gYXJyW2ldO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ08Yj4gICcgKyBpdC5uYW1lICsgJzxiPicgKyAoaXQuZm9yYmlkZGVuID8gXFxcIiAj4oCc4oCc56aB55So4oCd4oCdXFxcIi5zbWFsbCgpIDogXFxcIlxcXCIpLFxcbiAgICAgICAgdXJsOiAkKFtcXFwi57yW6L6RXFxcIiwgXFxcIui0puWPt1xcXCIsIFxcXCLliIbkuqtcXFwiLCBcXFwi56aB55SoL+WQr+eUqFxcXCJdKS5zZWxlY3QoKGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcXFwi57yW6L6RXFxcIikge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9pdGVtI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXCI7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gXFxcIui0puWPt1xcXCIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3BhZ2UvcGFzc3dvcmQjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSBcXFwi5YiG5LqrXFxcIikge1xcbiAgICAgICAgICAgICAgICBsZXQgb3BzID0gZ2V0UGFzdGVzKCk7XFxuICAgICAgICAgICAgICAgIG9wcy51bnNoaWZ0KFxcXCLlrozmlbTlj6Pku6RcXFwiKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQob3BzKS5zZWxlY3QoKGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZSA9ICQucmVxdWlyZShcXFwiY29uZmlnc1xcXCIpLmdldEpzb24oKVtpbmRleF07XFxuICAgICAgICAgICAgICAgICAgICBydWxlLnVzZXIgPSB1bmRlZmluZWQ7XFxuICAgICAgICAgICAgICAgICAgICBydWxlLnBhc3N3b3JkID0gdW5kZWZpbmVkO1xcbiAgICAgICAgICAgICAgICAgICAgcnVsZS5mb3JiaWRkZW4gPSB1bmRlZmluZWQ7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZWI2NCA9IGJhc2U2NEVuY29kZShKU09OLnN0cmluZ2lmeShydWxlKSk7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgZ2V0UGFzcyA9IChuYW1lLCBydWxlLCB0eXBlKSA9PiBcXFwi5rW36ZiU6KeG55WM77yM44CMXFxcIiArIG5hbWUgKyBcXFwi44CN5o+Q5Lqk6KeE5YiZ77yM5aSN5Yi25pW05p2h5Y+j5Luk5omT5byA6L2v5Lu25bCx5Lya6Ieq5Yqo5a+85YWlJFxcXCIgKyBydWxlICsgXFxcIiRcXFwiICsgdHlwZSArIFxcXCJAaW1wb3J0PWpzOiQucmVxdWlyZSgnaW1wb3J0P3J1bGU9JytcXFwiICsgSlNPTi5zdHJpbmdpZnkoTVlfUlVMRS50aXRsZSkgKyBcXFwiKShpbnB1dClcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09IFxcXCLlrozmlbTlj6Pku6RcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJjb3B5Oi8vXFxcIiArIGdldFBhc3MocnVsZS5uYW1lLCBydWxlYjY0LCBcXFwiYVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IHNoYXJlUGFzdGUocnVsZWI2NCwgaW5wdXQpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiY29weTovL1xcXCIgKyBnZXRQYXNzKHJ1bGUubmFtZSwgdSwgXFxcImJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSwgaW5kZXgpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGxldCBhcnIgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5nZXRKc29uKCk7XFxuICAgICAgICAgICAgICAgIGxldCBydWxlID0gYXJyW2luZGV4XTtcXG4gICAgICAgICAgICAgICAgcnVsZS5mb3JiaWRkZW4gPSAhcnVsZS5mb3JiaWRkZW47XFxuICAgICAgICAgICAgICAgICQucmVxdWlyZShcXFwiY29uZmlnc1xcXCIpLnNhdmVKc29uKGFycik7XFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgLy9yZXR1cm4gXFxcInRvYXN0Oi8vXFxcIiArIChydWxlLmZvcmJpZGRlbiA/IFxcXCLnpoHnlKhcXFwiIDogXFxcIuWQr+eUqFxcXCIpICsgcnVsZS5uYW1lO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sIGkpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBpOiBpLFxcbiAgICAgICAgICAgIHBhZ2VUaXRsZTogaXQubmFtZVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG59XFxuXFxuXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLmlrDlop5cXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvaXRlbSNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSNcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBwYWdlVGl0bGU6IFxcXCLmlrDlop7mj5DkuqTop4TliJlcXFwiXFxuICAgIH1cXG59KTtcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogXFxcIue8lui+keaWh+S7tlxcXCIsXFxuICAgIHVybDogXFxcImVkaXRGaWxlOi8vXFxcIiArICQucmVxdWlyZShcXFwiY29uZmlnc1xcXCIpLnBhdGgsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG4gICAgZGVzYzogXFxcIlxcXCIsXFxuICAgIHBpY191cmw6IFxcXCJcXFwiXFxufSk7XFxuXFxuc2V0UmVzdWx0KGQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiaXRlbVwiLFwicGF0aFwiOlwiaXRlbVwiLFwicnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG5hZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICBjbGVhck15VmFyKFxcXCJwc19uYW1lXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoXFxcInBzX2pzXFxcIik7XFxufSkpO1xcblxcbmxldCBpbmRleCA9IE1ZX1BBUkFNUy5pO1xcbmxldCBhcnIgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5nZXRKc29uKCk7XFxubGV0IG9iajtcXG5pZiAoaW5kZXggIT09IHZvaWQoMCkpIHtcXG4gICAgb2JqID0gYXJyW2luZGV4XTtcXG4gICAgc2V0UGFnZVRpdGxlKFxcXCLnvJbovpHop4TliJk6XFxcIiArIG9iai5uYW1lKTtcXG59IGVsc2Uge1xcbiAgICBvYmogPSB7fTtcXG4gICAgc2V0UGFnZVRpdGxlKFxcXCLmlrDlu7rop4TliJlcXFwiKTtcXG59XFxuXFxuZC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgIGRlc2M6IFxcXCLlj5bkuKrlkI3lrZdcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgb25DaGFuZ2U6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCJwc19uYW1lXFxcIiwgaW5wdXQpO1xcbiAgICAgICAgfSksXFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG9iai5uYW1lLFxcbiAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZVxcbiAgICB9XFxufSk7XFxuZC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgIGRlc2M6IFxcXCJKU+S7o+eggVxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICB0eXBlOiBcXFwidGV4dGFyZWFcXFwiLFxcbiAgICAgICAgaGVpZ2h0OiAzLFxcbiAgICAgICAgaGlnaGxpZ2h0OiB0cnVlLFxcbiAgICAgICAgb25DaGFuZ2U6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCJwc19qc1xcXCIsIGlucHV0KTtcXG4gICAgICAgIH0pLFxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBvYmouanMsXFxuICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlLFxcbiAgICB9XFxufSk7XFxuXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLliKDpmaRcXFwiLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGluZGV4KSA9PiB7XFxuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQoMCkpIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5q2k6aG55peg5rOV5Yig6ZmkXFxcIlxcbiAgICAgICAgfVxcbiAgICAgICAgY29uZmlybSh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLmuKnppqjmj5DnpLpcXFwiLFxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCLnoa7lrpropoHliKDpmaTmraTop4TliJnlkJfvvJ/ms6jmhI/liKDpmaTlkI7ml6Dms5XmgaLlpI1cXFwiLFxcbiAgICAgICAgICAgIGNvbmZpcm06ICQudG9TdHJpbmcoKGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBhcnIgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5nZXRKc29uKCk7XFxuICAgICAgICAgICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xcbiAgICAgICAgICAgICAgICAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5zYXZlSnNvbihhcnIpO1xcbiAgICAgICAgICAgICAgICBiYWNrKHRydWUpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICB9LCBpbmRleClcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICB9LCBpbmRleCksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG59KTtcXG5cXG5kLnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuS/neWtmFxcXCIsXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaW5kZXgpID0+IHtcXG4gICAgICAgIGxldCBuYW1lID0gZ2V0TXlWYXIoXFxcInBzX25hbWVcXFwiLCBcXFwiXFxcIik7XFxuICAgICAgICBpZiAobmFtZSA9PSBcXFwiXFxcIikge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lkI3lrZflvpfmnInkuIDkuKrlkKdcXFwiXFxuICAgICAgICB9XFxuICAgICAgICBsZXQganMgPSBnZXRNeVZhcihcXFwicHNfanNcXFwiLCBcXFwiXFxcIik7XFxuICAgICAgICBpZiAoanMgPT0gXFxcIlxcXCIpIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8vSlPku6PnoIHkuI3og73kuLrnqbpcXFwiXFxuICAgICAgICB9XFxuICAgICAgICBsZXQgYXJyID0gJC5yZXF1aXJlKFxcXCJjb25maWdzXFxcIikuZ2V0SnNvbigpO1xcbiAgICAgICAgbGV0IG9iajEgPSB7XFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcXG4gICAgICAgICAgICBqczoganNcXG4gICAgICAgIH07XFxuICAgICAgICBpZiAoaW5kZXggPT09IHZvaWQoMCkpIHtcXG4gICAgICAgICAgICBpZiAoYXJyLnNvbWUodiA9PiB2Lm5hbWUgPT09IG5hbWUpKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lt7Lnu4/lrZjlnKjor6Xop4TliJlcXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBhcnIudW5zaGlmdChvYmoxKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgb2JqMSA9IE9iamVjdC5hc3NpZ24oYXJyW2luZGV4XSwgb2JqMSk7XFxuICAgICAgICAgICAgYXJyLnNwbGljZShpbmRleCwgMSwgb2JqMSk7XFxuICAgICAgICB9XFxuICAgICAgICAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5zYXZlSnNvbihhcnIpO1xcbiAgICAgICAgYmFjayh0cnVlKTtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/kv53lrZjmiJDlip9cXFwiO1xcbiAgICB9LCBpbmRleCksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG59KTtcXG5cXG5zZXRSZXN1bHQoZCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCJjb25maWdzXCIsXCJwYXRoXCI6XCJjb25maWdzXCIsXCJydWxlXCI6XCJjb25zdCBwYXRoID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvc3RvcmVob3VzZS5qc29uXFxcIjtcXG5cXG5mdW5jdGlvbiBnZXRKc29uKCkge1xcbiAgICB0cnkge1xcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZmV0Y2gocGF0aCkgfHwgXFxcIltdXFxcIik7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGRlbGV0ZUZpbGUocGF0aCk7XFxuICAgICAgICByZXR1cm4gW107XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gc2F2ZUpzb24oanNvbikge1xcbiAgICB3cml0ZUZpbGUocGF0aCwgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xcbn1cXG5mdW5jdGlvbiBnZXRVc2VmdWxKc29uKCl7XFxuICAgIHJldHVybiBnZXRKc29uKCkuZmlsdGVyKHY9PiF2LmZvcmJpZGRlbik7XFxufVxcbiQuZXhwb3J0cyA9IHtcXG4gICAgZ2V0SnNvbjogZ2V0SnNvbixcXG4gICAgc2F2ZUpzb246IHNhdmVKc29uLFxcbiAgICBnZXRVc2VmdWxKc29uOiBnZXRVc2VmdWxKc29uLFxcbiAgICBwYXRoOiBwYXRoXFxufTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcInBhc3N3b3JkXCIsXCJwYXRoXCI6XCJwYXNzd29yZFwiLFwicnVsZVwiOlwianM6XFxuKGZ1bmN0aW9uKCkge1xcbiAgICB2YXIgZCA9IFtdO1xcbiAgICBhZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgY2xlYXJNeVZhcihcXFwicHNfdXNlclxcXCIpO1xcbiAgICAgICAgY2xlYXJNeVZhcihcXFwicHNfcGFzc3dvcmRcXFwiKTtcXG4gICAgfSkpO1xcbiAgICBsZXQgaW5kZXggPSBNWV9QQVJBTVMuaTtcXG4gICAgbGV0IGFyciA9ICQucmVxdWlyZShcXFwiY29uZmlnc1xcXCIpLmdldEpzb24oKTtcXG4gICAgbGV0IHJ1bGVuYW1lID0gZ2V0UGFyYW0oXFxcIm5hbWVcXFwiLFxcXCJcXFwiKSB8fCBNWV9QQVJBTVMubmFtZTtcXG4gICAgaWYgKGluZGV4ID09PSB2b2lkKDApICYmIHJ1bGVuYW1lKSB7XFxuICAgICAgICBpbmRleCA9IGFyci5maW5kSW5kZXgodiA9PiB2Lm5hbWUgPT09IHJ1bGVuYW1lKTtcXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcXG4gICAgICAgICAgICBiYWNrKGZhbHNlKTtcXG4gICAgICAgICAgICB0b2FzdChcXFwi6L+Y5rKh5pyJ6K+l5o+Q5Lqk6KeE5YiZ77yaXFxcIiArIHJ1bGVuYW1lKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgbGV0IG9iaiA9IGFycltpbmRleF0gfHwge307XFxuICAgIHNldFBhZ2VUaXRsZShcXFwi6K6+572u6LSm5Y+3OlxcXCIgKyBvYmoubmFtZSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgICAgIGRlc2M6IFxcXCLnlKjmiLflkI1cXFwiLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBvbkNoYW5nZTogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJwc191c2VyXFxcIiwgaW5wdXQpO1xcbiAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogb2JqLnVzZXIsXFxuICAgICAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaW5wdXRcXFwiLFxcbiAgICAgICAgZGVzYzogXFxcIuWvhueggVxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIHR5cGU6IFxcXCJwYXNzd29yZFxcXCIsXFxuICAgICAgICAgICAgb25DaGFuZ2U6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwicHNfcGFzc3dvcmRcXFwiLCBpbnB1dCk7XFxuICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBvYmoucGFzc3dvcmQsXFxuICAgICAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZSxcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuS/neWtmFxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgbGV0IHVzZXIgPSBnZXRNeVZhcihcXFwicHNfdXNlclxcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICBpZiAodXNlciA9PSBcXFwiXFxcIikge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v55So5oi35ZCN5LiN6IO95Li656m6XFxcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgcGFzc3dvcmQgPSBnZXRNeVZhcihcXFwicHNfcGFzc3dvcmRcXFwiLCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgaWYgKHBhc3N3b3JkID09IFxcXCJcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lr4bnoIHkuI3og73kuLrnqbpcXFwiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGxldCBhcnIgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5nZXRKc29uKCk7XFxuICAgICAgICAgICAgbGV0IGl0ZW0gPSBhcnJbaW5kZXhdO1xcbiAgICAgICAgICAgIGl0ZW0udXNlciA9IHVzZXI7XFxuICAgICAgICAgICAgaXRlbS5wYXNzd29yZCA9IHBhc3N3b3JkO1xcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gdm9pZCgwKSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8vaWTplJnor69cXFwiO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDEsIGl0ZW0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAkLnJlcXVpcmUoXFxcImNvbmZpZ3NcXFwiKS5zYXZlSnNvbihhcnIpO1xcbiAgICAgICAgICAgIGJhY2sodHJ1ZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+S/neWtmOaIkOWKn1xcXCI7XFxuICAgICAgICB9LCBpbmRleCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICB9KTtcXG4gICAgc2V0UmVzdWx0KGQpO1xcbn0pKClcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaPkOS6pOS6keS7k+W6k+inhOWImVwiLFwicGF0aFwiOlwi5o+Q5Lqk5LqR5LuT5bqT6KeE5YiZXCIsXCJydWxlXCI6XCIkLmV4cG9ydHMucnVuID0gKHJ1bGVUaXRsZSkgPT4ge1xcbiAgICBsZXQgcnVsZXMgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3M/cnVsZT1cXFwiICsgcnVsZVRpdGxlKS5nZXRVc2VmdWxKc29uKCk7XFxuICAgIGlmIChydWxlcy5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIHJldHVybiBcXFwi5o+Q5Lqk5aSx6LSlOui/mOayoeacieiuvue9ruaPkOS6pOinhOWImVxcXCI7XFxuICAgIH1cXG4gICAgaWYgKHJ1bGVzLmxlbmd0aCA+IDEpIHtcXG4gICAgICAgIGxldCBuYW1lcyA9IHJ1bGVzLm1hcCh2ID0+IHYubmFtZSk7XFxuICAgICAgICBuYW1lcy51bnNoaWZ0KFxcXCLigJzigJzmj5DkuqTliLDmiYDmnInku5PlupPigJ3igJ1cXFwiKTtcXG4gICAgICAgIGxldCBkZXNjO1xcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoTVlfUlVMRSkpIHtcXG4gICAgICAgICAgICBkZXNjID0gXFxcIuaPkOS6pOWIhue7hDpcXFwiICsgTVlfUlVMRVswXS5ncm91cDtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgZGVzYyA9IFxcXCLmj5DkuqTniYjmnKw6XFxcIiArIE1ZX1JVTEUudmVyc2lvbjtcXG4gICAgICAgIH1cXG4gICAgICAgIHNob3dTZWxlY3RPcHRpb25zKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuivt+mAieaLqeS7k+W6k1tcXFwiICsgZGVzYyArIFxcXCJdXFxcIixcXG4gICAgICAgICAgICBvcHRpb25zOiBuYW1lcyxcXG4gICAgICAgICAgICBjb2w6IDEsXFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKE1ZX1JVTEUsIHJ1bGVUaXRsZSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3M/cnVsZT1cXFwiICsgcnVsZVRpdGxlKS5nZXRVc2VmdWxKc29uKCk7XFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXFxcIuKAnOKAnOaPkOS6pOWIsOaJgOacieS7k+W6k+KAneKAnVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdWNjZXNzID0gW107XFxuICAgICAgICAgICAgICAgICAgICBsZXQgZmFpbCA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcnVsZSBvZiBydWxlcykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKFxcXCJNWV9SVUxFXFxcIiwgXFxcIk1ZX0FDQ09VTlRcXFwiLCBcXFwiTVlfUEFTU1dPUkRcXFwiLCBydWxlLmpzKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzID0gZnVuYyhNWV9SVUxFLCBydWxlLnVzZXIsIHJ1bGUucGFzc3dvcmQpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuaW5jbHVkZXMoXFxcInN1Y2Nlc3NcXFwiKSB8fCByZXMuaW5jbHVkZXMoXFxcIuaIkOWKn1xcXCIpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MucHVzaChydWxlLm5hbWUgKyBcXFwiOlxcXCIgKyByZXMpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwucHVzaChydWxlLm5hbWUgKyBcXFwiOlxcXCIgKyByZXMpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXNzID0gYOaPkOS6pOe7k+aenO+8miR7c3VjY2Vzcy5sZW5ndGh95Liq5oiQ5Yqf77yMJHtmYWlsLmxlbmd0aH3kuKrlpLHotKVgO1xcbiAgICAgICAgICAgICAgICAgICAgbG9nKHJlc3MpO1xcbiAgICAgICAgICAgICAgICAgICAgbG9nKFxcXCLmiJDlip8k77yaXFxcXG5cXFwiICsgc3VjY2Vzcy5qb2luKFxcXCJcXFxcblxcXFxuXFxcIikpO1xcbiAgICAgICAgICAgICAgICAgICAgbG9nKFxcXCLlpLHotKUk77yaXFxcXG5cXFwiICsgZmFpbC5qb2luKFxcXCJcXFxcblxcXFxuXFxcIikpO1xcbiAgICAgICAgICAgICAgICAgICAgdG9hc3QocmVzcyk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzLmZpbmQodiA9PiB2Lm5hbWUgPT09IGlucHV0KTtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmdW5jID0gbmV3IEZ1bmN0aW9uKFxcXCJNWV9SVUxFXFxcIiwgXFxcIk1ZX0FDQ09VTlRcXFwiLCBcXFwiTVlfUEFTU1dPUkRcXFwiLCBydWxlLmpzKTtcXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0KGZ1bmMoTVlfUlVMRSwgcnVsZS51c2VyLCBydWxlLnBhc3N3b3JkKSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LCBNWV9SVUxFLCBydWxlVGl0bGUpXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBcXFwi6KeE5YiZ6I635Y+W5oiQ5Yqf77yM5b6F6YCJ5oup5o+Q5Lqk55qE5LuT5bqTLOivt+eojeetiS4uLlxcXCI7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzWzBdO1xcbiAgICAgICAgbGV0IGZ1bmMgPSBuZXcgRnVuY3Rpb24oXFxcIk1ZX1JVTEVcXFwiLCBcXFwiTVlfQUNDT1VOVFxcXCIsIFxcXCJNWV9QQVNTV09SRFxcXCIsIHJ1bGUuanMpO1xcbiAgICAgICAgcmV0dXJuIGZ1bmMoTVlfUlVMRSwgcnVsZS51c2VyLCBydWxlLnBhc3N3b3JkKTtcXG4gICAgfVxcbn1cXG4kLmV4cG9ydHMucGFzcyA9ICQudG9TdHJpbmcoKHJ1bGVUaXRsZSkgPT4gJC5yZXF1aXJlKFxcXCLmj5DkuqTkupHku5PlupPop4TliJk/cnVsZT1cXFwiICsgcnVsZVRpdGxlKS5ydW4ocnVsZVRpdGxlKSwgTVlfUlVMRS50aXRsZSk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLlr7zlhaVcIixcInBhdGhcIjpcImltcG9ydFwiLFwicnVsZVwiOlwianM6XFxuJC5leHBvcnRzID0gZnVuY3Rpb24ocGFzcykge1xcbiAgICB0cnkge1xcbiAgICAgICAgcGFzcyA9IHBhc3Muc3BsaXQoXFxcIiRcXFwiKTtcXG4gICAgICAgIGxldCBydWxlID0gcGFzc1sxXTtcXG4gICAgICAgIGxldCB0eXBlID0gcGFzc1syXTtcXG4gICAgICAgIGlmICh0eXBlID09PSBcXFwiYlxcXCIpIHtcXG4gICAgICAgICAgICBydWxlID0gcGFyc2VQYXN0ZShydWxlKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJ1bGUgPSBKU09OLnBhcnNlKGJhc2U2NERlY29kZShydWxlKSk7XFxuICAgICAgICBNWV9VUkwgPSBtb2R1bGUuaWQ7XFxuICAgICAgICBsZXQgcnVsZVRpdGxlID0gZ2V0UGFyYW0oXFxcInJ1bGVcXFwiKTtcXG4gICAgICAgIGxldCBhcnIgPSAkLnJlcXVpcmUoXFxcImNvbmZpZ3M/cnVsZT1cXFwiICsgcnVsZVRpdGxlKS5nZXRKc29uKCk7XFxuICAgICAgICBsZXQgaW5kZXggPSBhcnIuZmluZEluZGV4KHYgPT4gdi5uYW1lID09PSBydWxlLm5hbWUpO1xcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcXG4gICAgICAgICAgICBydWxlID0gT2JqZWN0LmFzc2lnbihhcnJbaW5kZXhdLCBydWxlKTtcXG4gICAgICAgICAgICBhcnIuc3BsaWNlKGluZGV4LCAxLCBydWxlKTtcXG4gICAgICAgICAgICB0b2FzdChcXFwi5bey5pu05paw5o+Q5Lqk6KeE5YiZ77yaXFxcIiArIHJ1bGUubmFtZSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGFyci51bnNoaWZ0KHJ1bGUpO1xcbiAgICAgICAgICAgIHRvYXN0KFxcXCLlt7Llr7zlhaXmj5DkuqTop4TliJnvvJpcXFwiICsgcnVsZS5uYW1lKTtcXG4gICAgICAgIH1cXG4gICAgICAgICQucmVxdWlyZShcXFwiY29uZmlncz9ydWxlPVxcXCIgKyBydWxlVGl0bGUpLnNhdmVKc29uKGFycik7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgdG9hc3QoXFxcIuWvvOWFpeWksei0pVxcXCIpO1xcbiAgICB9XFxufVwifV0iLCJwcm94eSI6IiIsImljb24iOiJodHRwczovL2hpa2VyZmFucy5jb20vdHViaWFvL3N5c3RlbS8yNS5wbmcifQ==